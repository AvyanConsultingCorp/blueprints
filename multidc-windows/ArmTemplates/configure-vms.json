{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "numberOfInstances": {
      "type": "int",
      "metadata": {
        "description": "Number of VMs to deploy"
      }
    },
    "subnetRef": {
      "type": "string",
      "metadata": {
        "description": "Id of the subnet where VMs to be created"
      }
    },
    "lbFrontendPrivateIp": {
      "type": "string",
      "metadata": {
        "description": "Private IP address of the frontend configuration of load balancer"
      }
    },
    "networkInterfacePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix of the network interfaces"
      }
    },
    "loadBalancerName": {
      "type": "string",
      "metadata": {
        "description": "Name of the load balancer"
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "Image Publisher"
      }
    },
    "vmNamePrefix": {
      "type": "string",
      "defaultValue": "vm",
      "metadata": {
        "description": "Prefix to use for VM names"
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "Image Offer"
      }
    },
    "imageSKU": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "metadata": {
        "description": "Image SKU"
      }
    },
    "vmStorageAccountContainerName": {
      "type": "string",
      "defaultValue": "vhds",
      "metadata": {
        "description": "This is the storage account container name"
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Storage account name"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D1",
      "metadata": {
        "description": "This is the allowed list of VM sizes"
      }
    },
    "projectName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Name of this project"
      }
    }
  },
  "variables": {
    "availabilitySetName": "AvSet",
    "storageAccountType": "Standard_LRS",
    "lbId": "[resourceId('Microsoft.Network/loadBalancers',parameters('loadBalancerName'))]",
    "sqlAlwaysOnConfigScriptFolder": "[concat(parameters('projectName'), '/', 'customScripts')]",
    "sqlAlwaysOnConfigScriptFileName": "ActivateDirectory.ps1",
    "lbBackendPool": "app13-dev-lb-pool",
    "storageAccountUniqueName": "[concat(parameters('storageAccountName'), uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountUniqueName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      },
      "tags": {
        "displayName": "StorageAccounts"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "platformFaultDomainCount": 3,
        "platformUpdateDomainCount": 3
      },
      "tags": {
        "displayName": "AvailabilitySet"
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(parameters('networkInterfacePrefix'), copyindex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', parameters('loadBalancerName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[parameters('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('lbID'), '/backendAddressPools/', variables('lbBackendPool'))]"
                }
              ]
            }
          }
        ]
      },
      "tags": {
        "displayName": "NetworkInterfaces"
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[parameters('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "properties": {
              "subnet": {
                "id": "[parameters('subnetRef')]"
              },
              "privateIPAddress": "[parameters('lbFrontendPrivateIp')]",
              "privateIPAllocationMethod": "Static"
            },
            "name": "app13-dev-lb-fe"
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('lbBackendPool')]"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/frontendIpConfigurations/app13-dev-lb-fe')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/backendAddressPools/',variables('lbBackendPool'))]"
              },
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('loadBalancerName')), '/probes/lbprobe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 15
            },
            "Name": "lbrule"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 80,
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "lbprobe"
          }
        ]
      },
      "tags": {
        "displayName": "LoadBalancer"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(parameters('vmNamePrefix'),'-', copyindex())]",
      "copy": {
        "name": "virtualMachineLoop",
        "count": "[parameters('numberOfInstances')]"
      },
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('storageAccountUniqueName')]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('networkInterfacePrefix'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetName'))]"
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[concat(parameters('vmNamePrefix'),'-', copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', variables('storageAccountUniqueName'),'.blob.core.windows.net/vhds/', parameters('vmNamePrefix'), copyindex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(parameters('networkInterfacePrefix'),copyindex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',variables('storageAccountUniqueName'), '.blob.core.windows.net')]"
          }
        }
      },
      "tags": {
        "displayName": "VirtualMachines"
      },
      "resources": [
        {
          "name": "SqlAlwaysOnConfig",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', concat(parameters('vmNamePrefix'), '-',copyindex()))]"
          ],
          "tags": {
            "displayName": "SqlAlwaysOnConfig"
          },
          "properties": {
            "publisher": "Microsoft.Compute",
            "type": "CustomScriptExtension",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(uri(deployment().properties.templateLink.uri, variables('sqlAlwaysOnConfigScriptFolder')),'/', variables('sqlAlwaysOnConfigScriptFileName'))]"
              ],
              "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('sqlAlwaysOnConfigScriptFileName'), ' -SafeModePassword QAZwsx123 -Domain poltergeist.local')]"
            }
          }
        }
      ]
    }
  ]
}


